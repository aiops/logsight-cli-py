name: CI/CD

on:
  push:
    tags:
      - '*.*.*'
  pull_request:
    branches:
      - main

jobs:
  code-analysis:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies
        uses: py-actions/py-dependency-install@v3
        with:
          path: "requirements-dev.txt"
          update-pip: "false"
          update-setuptools: "false"
          update-wheel: "false"

      - name: Run log quality
        uses: aiops/check-log-quality-action@main

      - name: Check log quality score
        run: |
          echo "Job status= ${{ job.status }}."

      - name: Formatting and linters
        run: |
          tox -e lint

      - name: Build docs
        run: |
            echo "No docs to build yet"

  build:
    needs: code-analysis
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        python-version: [3.8]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v1
        with:
          python-version: '${{ matrix.python-version }}'
      - name: Install test dependencies
        run: |
          pip install -r requirements-dev.txt
      - name: 'Test with pytest (${{ runner.os }})'
        if: 'startsWith(runner.os, ''Linux'')'
        env:
          MIN_COVERAGE: 0
        run: |
          pytest tests -r a --cov=src --cov-report=xml
          if ! coverage report --fail-under=${MIN_COVERAGE} --show-missing
          then
              echo
              echo "Error: Test coverage has to be at least ${MIN_COVERAGE}"
              exit 0
          fi
      - name: 'Test with pytest (${{ runner.os }})'
        if: 'startsWith(runner.os, ''Windows'')'
        run: |
          pytest tests -r a

  test-environment:
    needs: build
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.8]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v1
        with:
          python-version: '${{ matrix.python-version }}'
      - name: 'Install (${{ runner.os }})'
        if: >-
          startsWith(runner.os, 'Windows') && endsWith(matrix.python-version,'3.8')
        run: |
          pip install --upgrade --user pip wheel
      - name: 'Install (${{ runner.os }})'
        run: |
          pip install --upgrade pip wheel
          pip install .
      - name: Test installation
        run: |
          logsight --version

  publish-pypi:
    name: Publish to PyPI and TestPyPI
    needs: [test-environment]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
      - name: Install Python dependencies
        uses: py-actions/py-dependency-install@v3
        with:
          path: requirements.txt
          update-pip: 'false'
          update-setuptools: 'false'
          update-wheel: 'false'
      - name: Install build dependencies
        run: python -m pip install build wheel

      - name: Build binary wheel and a source distribution (to build distribution -bdist)
        run: python setup.py sdist

      - name: "Publish distribution \U0001F4E6 to Test PyPI"
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: '${{ secrets.LOGSIGHT_CLI_TEST_PYPI_TOKEN }}'
          repository_url: 'https://test.pypi.org/legacy/'
      - name: "Publish distribution \U0001F4E6 to PyPI"
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: '${{ secrets.LOGSIGHT_CLI_PYPI_TOKEN }}'

  publish-github:
    name: Publish to GitHub
    needs: [test-environment]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set env tag
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Test env tag
        run: |
          echo $RELEASE_VERSION
          echo ${{ env.RELEASE_VERSION }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: Release ${{ env.RELEASE_VERSION }}
          body_path: ./CHANGELOG.md
          draft: false
          prerelease: false